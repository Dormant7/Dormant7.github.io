<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>拼途</title>
  <subtitle>我也看到了，他好像条狗哎。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-04-04T16:06:20.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Dormant7</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>在路上----山东</title>
    <link href="http://yoursite.com/2017/03/04/%E6%97%85%E8%A1%8C%E6%97%A5%E5%BF%97-1/"/>
    <id>http://yoursite.com/2017/03/04/旅行日志-1/</id>
    <published>2017-03-03T16:00:00.000Z</published>
    <updated>2017-04-04T16:06:20.000Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p><img src="/Users/meidong/blog/img/旅行.jpg" alt="旅行的日子"></p>
<hr>
<p><em><font size="3" face="微软雅黑">“清明时节雨纷纷”，又一个清明节到了，在南方读了大学和研究生，仿佛忘了家里的春天是什么样子，4月的北京雾霾少了，天真的晴朗起来确实还是很美的。趁着清明节的小假期，加上请的两天假，和同学选了个时间比较充裕的地方玩一下—–山东（济南和泰安）。<br></font></em></p>
<hr>
<h2 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h2><p>坐上清晨的高铁去的第一站—-济南。泉城济南，这个城市在我的印象中还停留在初中课本中的文章《济南的冬天》，老舍先生把济南的冬天描述的萧瑟，冷峻。之前从来没去过山东，但印象中的山东人纯朴，老实，毕竟都是孔孟的后代。确实去过之后感觉山东人还是很好的。第一天去了趵突泉，由于是节日人还是挺多的。但是趵突泉没有给我很大的惊喜，或许是时间还没到吧，泉水喷的并不是很冲，但是也能感觉到春天的脚步近了，到处都生机盎然……</p>
<p><img src="/Users/meidong/blog/img/WechatIMG1.jpeg" alt="趵突泉"></p>
<h2 id="第二天"><a href="#第二天" class="headerlink" title="第二天"></a>第二天</h2><p>去济南我们都知道要看三大景观，趵突泉，千佛山，大明湖。第二天我们的目的地就是后两者。因为住的宾馆离大明湖比较近，就进去了大明湖。抱着看看”大明湖畔的夏紫薇”,但是始终没有找到，仅仅是围绕着湖的岸边装了一圈，感觉大明湖就是一个人们休闲的大公园，也是这三个景点唯一不需要门票的地方，春天来了还是不错的。</p>
<p><img src="/Users/meidong/blog/img/WechatIMG4.jpeg" alt="大明湖"></p>
<p>下午去了千佛山，其实赶巧了，正好遇到三月三千佛山庙会，人确实很多；千佛山，顾名思义，山上基本都是佛，但山确实并不高，大概200多米，我们也只是简单爬了下，看了眼济南的全城，感觉济南的雾霾太大了。</p>
<p><img src="/Users/meidong/blog/img/WechatIMG2.jpeg" alt="千佛山"></p>
<p><img src="/Users/meidong/blog/img/WechatIMG3.jpeg" alt="济南全城"></p>
<p>在济南呆了两天吧，总体感觉济南这个城市基础建设一般，司机师傅说正在建地铁，但是城市感觉有点乱，街道并不是很干净，但是消费相对较低，人们还是很和蔼的。玩了三个地方，品尝下济南的小吃街，算是不虚此行……</p>
<h2 id="第三天"><a href="#第三天" class="headerlink" title="第三天"></a>第三天</h2><p>第三天是重点—-泰山。我们并没有打算去看泰山的日出，最主要的原因是太累，基本上晚上10点前要开始爬山，凌晨3点左右到山顶，觉得这样太累。于是决定就白天上山，体会一下一览众山小的感觉就好了。这样，早上8点多到泰安，做公交直达泰山山脚下开始行程。我们还特意记录了时间，从10：00开始爬；爬泰山分两部分，一是前半部分山脚到中天门，也是比较好爬的一段路程。比较平坦；后半部分从中天门到南天门再到玉皇顶，相对难很多了。尤其是十八盘那段，很陡的山路，基本上都要休息下。其实越是休息越累，这个就是一鼓作气，也是在后半部分泰山的人文景观就开始多了。包括各种名人提的字等，上山时其实不用带干粮，山上的吃的并不贵，这点我们之前没有想到，背着几瓶水登山也是……；</p>
<p><img src="/Users/meidong/blog/img/WechatIMG5.jpeg" alt="中天门"></p>
<p><img src="/Users/meidong/blog/img/WechatIMG7.jpeg" alt="文化"></p>
<p><img src="/Users/meidong/blog/img/WechatIMG8.jpeg" alt="泰山"></p>
<p><img src="/Users/meidong/blog/img/WechatIMG9.jpeg" alt="泰山"></p>
<p><img src="/Users/meidong/blog/img/WechatIMG11.jpeg" alt="泰山"></p>
<p><img src="/Users/meidong/blog/img/WechatIMG12.jpeg" alt="泰山"></p>
<p><img src="/Users/meidong/blog/img/WechatIMG13.jpeg" alt="泰山"></p>
<p>五岳之首，泰山1500多米，确实有种霸气的感觉；泰山以其独特的文化气息在中国山脉届占有重要的地位。当经过疲惫的攀登，到达玉皇顶的那一刻还是感觉异常的兴奋，真的有众山小的感觉。</p>
<p>结束三天的旅行，虽然累，但是心情却是满足的；</p>
<p>其实人生就像一场旅行，在乎的不是目的地，在乎的是沿途的风景以及看风景的心情……</p>
<p>生活依然前行，旅行还在继续，下一个……</p>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;/Users/meidong/blog/img/旅行.jpg&quot; alt=&quot;旅行的日子&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;&lt;font size=&quot;3&quot; face=&quot;微软雅黑&quot;&gt;“清明时节雨纷纷”，又一个清明节到了，在南方读了大学和研究生，仿佛忘
    
    </summary>
    
    
      <category term="旅行" scheme="http://yoursite.com/tags/%E6%97%85%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>Effective C++ 阅读笔记(1)</title>
    <link href="http://yoursite.com/2017/03/01/Effective-C-1/"/>
    <id>http://yoursite.com/2017/03/01/Effective-C-1/</id>
    <published>2017-02-28T16:00:00.000Z</published>
    <updated>2017-03-22T17:24:09.000Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p><em><font size="3" face="微软雅黑">  最近在公司实习，做的是偏数据分析的事情，用的更多的是Python和Shell去开发和处理一些数据库和分布式系统中的数据，故之前相对熟悉的C++的一些细节和原理有些已经记不清楚了，现在正赶上今年的校招故拾起来再看下，希望对自己寻找工作的过程和将来的职业生涯都有帮助；更重要的一点是接触的C++时间更长些，还是没有研究的很深入，所以再读一遍之前看过的书，复习一下，希望有更深的理解！<br></font></em><br><a id="more"></a></p>
<hr>
<h1 id="一-让自己习惯C"><a href="#一-让自己习惯C" class="headerlink" title="一.让自己习惯C++"></a>一.让自己习惯C++</h1><h2 id="1-条款01：视C-为一个语言联邦"><a href="#1-条款01：视C-为一个语言联邦" class="headerlink" title="1.条款01：视C++为一个语言联邦"></a>1.条款01：视C++为一个语言联邦</h2><p>一开始，C++只是C上加一些面向对象的特征。故C++最初的名称 C with Classes,但是C++并非一种单一语言，C++ 中各种规则都倾向于简单、直观、容易，因此我们理解C++也有了下面4个最主要的特征：<br><strong>(1) C </strong><br><em>说到底C++仍以C为基础，包括 区块（blocks）、语句（statements）、预处理器（preprocessor）、内置数据类型(build-in data types)、数组（arrays）、指针(pointers)都来自C。但是高效的编程守则指出了C的局限：没有模板（templates）,没有异常（exceptions）,没有重载(overloading)</em></p>
<p><strong>(2) Object-Oriented C++ </strong><br>这一部分是面向对象的精髓坐在：classes(构造函数和析构函数)、封装(encapsulation)、继承(inheritance)、多态(polymorphism)、virtual 函数（动态绑定）……</p>
<p><strong>(3) Template C++ </strong><br>这是C++的泛型编程部分，威力非常强大，需要仔细学习</p>
<p><strong>(4) STL </strong><br>STL是template的程序库。它将容器(containers)、迭代器(iterators)、算法(algorithms)以及函数对象(fountion-objects)紧密的结合在一起</p>
<p><strong><em>还有一点，当我们从C转到C++后，pass-by-reference-to-const往往更加好用。C中的pass-by-value同样适用但是性能问题</em></strong></p>
<p><strong><em>因此高效编程要视情况而定</em></strong></p>
<p>—————————————————————————————————————————————</p>
<h2 id="2-条款02：尽量以const-enum-inline替换-define"><a href="#2-条款02：尽量以const-enum-inline替换-define" class="headerlink" title="2.条款02：尽量以const,enum,inline替换 #define"></a>2.条款02：尽量以const,enum,inline替换 #define</h2><p>这个问题曾经在我面试一个互联网公司时被问到了，当时答的也是不太清晰，尤其是面对原理时。</p>
<p><em>这个条款根据书中所说可以改成”宁可以编译器替换预处理器”更好</em>，我们在#define 后的记号或许就不就被编译器看到，或许在编译器开始处理源码之前就被预处理器移走了，于是记号就没有进入记号表(symbol table)中<br>。解决的方法就是用一个常量替换上述的宏（const）,作为语言常量，一定会被编译器看到。同时使用const比使用#define导致较小量的码。</p>
<p>针对const替换#define有两种特殊情况：</p>
<p><strong>(1) 定义常量指针</strong></p>
<p>由于常量定义式通常在头文件内，因此有必要将指针声明为const,这时使用string比char要优秀：</p>
<pre><code>const str::string str(&quot;hello world&quot;);
</code></pre><p><strong>(2) class专属常量</strong></p>
<p>为了将常量的作用于限制于class，这个常量必须定义在class内，<font size="3" face="黑体" color="#0099ff">而为了此常量没有其他副本，必须将它定义成static成员：</font></p>
<pre><code>class fruit{
    private:
        static const int num;
        int color[num];
        ……
};
</code></pre><p>同样可以在class内定义，或者class外定义：<br>    const int num = 5;<br>我们无法利用#define去创建一个class专属的变量，因为#define并不重视作用域。故不支持封装性</p>
<p><em>对于#define实现的宏，有时看起来更像函数，但不会有函数调用。这时就需要用inline取替换#define了</em></p>
<p><strong>总结：</strong><br><strong>对于单纯的常量，最好以const对象或enums替换#define</strong><br><strong>对于形似函数的宏（macros）,最好用inline函数替换#define</strong></p>
<p>—————————————————————————————————————————————</p>
<h2 id="3-条款03-尽可能使用const"><a href="#3-条款03-尽可能使用const" class="headerlink" title="3.条款03: 尽可能使用const"></a>3.条款03: 尽可能使用const</h2><p>const允许我们指定一个不被改变的对象，同时编译器会强制实施这项约束。const最优是用在面对函数声明时，const可以和函数返回值，各参数，函数自身产生关联。</p>
<p><strong>const成员函数</strong></p>
<p>将const实施于成员函数的目的是为了确认该成员函数可作用于const对象身上，这是很重要的：</p>
<p><1>这个使class接口比较容易被理解，即哪个函数可以，哪个不可以</1></p>
<p><2>它们使”操作const对象”成为了可能</2></p>
<p>—————————————————————————————————————————————</p>
<h2 id="4-条款04-确定对象被使用前已经先被初始化"><a href="#4-条款04-确定对象被使用前已经先被初始化" class="headerlink" title="4.条款04: 确定对象被使用前已经先被初始化"></a>4.条款04: 确定对象被使用前已经先被初始化</h2><p>针对将对象初始化，C和C++总是搞得很乱，其实在C++中已经通过default构造函数对对象进行了初始化，但是在non-C part of C++中并没有保障，所以我们的最佳处理就是永远在使用对象之前对它进行初始化，对于无任何成员的内置类型，必须手工完成初始化</p>
<p><strong>理解赋值(assignment)与初始化(initiazation)</strong></p>
<p>C++中，对象的成员变量的初始化动作发生在进入构造函数体之前，初始化的发生时间更早，发生于这些成员的default构造函数被自动调用之前，故我们初始化的最佳方法是 <font size="3" face="黑体" color="#0099ff">成员初值列</font></p>
<pre><code>fruit::fruit(const str::string &amp;color, const str::string &amp;size){
    theColor = color;
    theSize = size;
}；    //这是赋值


fruit::fruit(const str::string &amp;color, const str::string &amp;size):
    theColor(color),
    theSize(size)
    {}       //这是初始化，通常这个效率更高
</code></pre><p><em>规定：总是在初值列中列出所有的成员变量，同时总是使用成员初始化列</em></p>
<p>C++有着固定的”成员初始化次序”: 基类早于派生类初始化，同时class的成员变量总是以其声明的次序被初始化，无论在初始化列表是什么顺序，所以我们在初始化时尽量与声明的保持一致</p>
<p>针对static对象，寿命在被构造开始到程序结束，即main()函数退出，C++对”定义于不同的编译单元内的non-local static对象”的初始化相对次序并无明确的次序，所以这就需要我们在编写程序时加强程序的设计。</p>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;em&gt;&lt;font size=3 face = &quot;微软雅黑&quot;&gt;  最近在公司实习，做的是偏数据分析的事情，用的更多的是Python和Shell去开发和处理一些数据库和分布式系统中的数据，故之前相对熟悉的C++的一些细节和原理有些已经记不清楚了，现在正赶上今年的校招故拾起来再看下，希望对自己寻找工作的过程和将来的职业生涯都有帮助；更重要的一点是接触的C++时间更长些，还是没有研究的很深入，所以再读一遍之前看过的书，复习一下，希望有更深的理解！&lt;br&gt;&lt;/font&gt;&lt;/em&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
</feed>
